name: Deploy Frontend

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

defaults:
  run:
    working-directory: ./frontend

jobs:
  deploy-vercel:
    name: Deploy to Vercel
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'production' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Create environment file
        run: |
          if [[ "${{ github.event.inputs.environment }}" == "production" ]]; then
            cat > .env.local << EOF
            NEXT_PUBLIC_API_URL=${{ secrets.PRODUCTION_API_URL }}
            NEXT_PUBLIC_STELLAR_NETWORK=mainnet
            NEXT_PUBLIC_CONTRACT_ID=${{ secrets.PRODUCTION_CONTRACT_ID }}
            NEXT_PUBLIC_ENVIRONMENT=production
            EOF
          else
            cat > .env.local << EOF
            NEXT_PUBLIC_API_URL=${{ secrets.STAGING_API_URL }}
            NEXT_PUBLIC_STELLAR_NETWORK=testnet
            NEXT_PUBLIC_CONTRACT_ID=${{ secrets.STAGING_CONTRACT_ID }}
            NEXT_PUBLIC_ENVIRONMENT=staging
            EOF
          fi

      - name: Build application
        run: npm run build

      - name: Deploy to Vercel
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          working-directory: ./frontend
          vercel-args: ${{ github.event.inputs.environment == 'production' && '--prod' || '' }}

  deploy-netlify:
    name: Deploy to Netlify
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'production' }}
    if: github.event.inputs.environment != 'production'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Create environment file
        run: |
          cat > .env.local << EOF
          NEXT_PUBLIC_API_URL=${{ secrets.STAGING_API_URL }}
          NEXT_PUBLIC_STELLAR_NETWORK=testnet
          NEXT_PUBLIC_CONTRACT_ID=${{ secrets.STAGING_CONTRACT_ID }}
          NEXT_PUBLIC_ENVIRONMENT=staging
          EOF

      - name: Build application
        run: npm run build && npm run export

      - name: Deploy to Netlify
        uses: nwtgck/actions-netlify@v3.0
        with:
          publish-dir: './frontend/out'
          production-branch: main
          github-token: ${{ secrets.GITHUB_TOKEN }}
          deploy-message: "Deploy from GitHub Actions"
          enable-pull-request-comment: false
          enable-commit-comment: true
          overwrites-pull-request-comment: true
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}

  deploy-aws-s3:
    name: Deploy to AWS S3 + CloudFront
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'production' }}
    if: github.event.inputs.environment == 'production'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Create environment file
        run: |
          cat > .env.local << EOF
          NEXT_PUBLIC_API_URL=${{ secrets.PRODUCTION_API_URL }}
          NEXT_PUBLIC_STELLAR_NETWORK=mainnet
          NEXT_PUBLIC_CONTRACT_ID=${{ secrets.PRODUCTION_CONTRACT_ID }}
          NEXT_PUBLIC_ENVIRONMENT=production
          EOF

      - name: Build application
        run: npm run build && npm run export

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Sync files to S3
        run: |
          aws s3 sync ./out s3://${{ secrets.AWS_S3_BUCKET }} --delete \
            --cache-control "public,max-age=31536000,immutable" \
            --exclude "*.html" \
            --exclude "service-worker.js"
          
          aws s3 sync ./out s3://${{ secrets.AWS_S3_BUCKET }} \
            --cache-control "public,max-age=0,must-revalidate" \
            --include "*.html" \
            --include "service-worker.js"

      - name: Invalidate CloudFront
        run: |
          aws cloudfront create-invalidation \
            --distribution-id ${{ secrets.AWS_CLOUDFRONT_DISTRIBUTION_ID }} \
            --paths "/*"

  smoke-test:
    name: Smoke Tests
    runs-on: ubuntu-latest
    needs: [deploy-vercel]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install Playwright
        run: |
          npm install playwright
          npx playwright install --with-deps chromium

      - name: Wait for deployment
        run: sleep 60

      - name: Run smoke tests
        run: |
          npx playwright test --config=playwright-smoke.config.js
        env:
          BASE_URL: ${{ needs.deploy-vercel.outputs.url || secrets.PRODUCTION_URL }}

  notify-deployment:
    name: Notify Deployment
    runs-on: ubuntu-latest
    needs: [deploy-vercel, deploy-netlify, deploy-aws-s3, smoke-test]
    if: always()
    steps:
      - name: Send Slack notification
        uses: 8398a7/action-slack@v3
        if: always()
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          username: GitHub Actions
          title: VeriLuxe Frontend Deployment
          text: |
            Environment: ${{ github.event.inputs.environment || 'production' }}
            Commit: ${{ github.sha }}
            Status: ${{ job.status }}
            URL: ${{ needs.deploy-vercel.outputs.url || secrets.PRODUCTION_URL }}
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}

      - name: Update deployment status
        uses: actions/github-script@v7
        if: always()
        with:
          script: |
            const deployment = await github.rest.repos.createDeployment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.sha,
              environment: '${{ github.event.inputs.environment || "production" }}',
              description: 'Frontend deployment',
              auto_merge: false,
              required_contexts: []
            });

            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: deployment.data.id,
              state: '${{ job.status == "success" && "success" || "failure" }}',
              description: 'Deployment ${{ job.status }}',
              environment_url: '${{ needs.deploy-vercel.outputs.url || secrets.PRODUCTION_URL }}'
            });