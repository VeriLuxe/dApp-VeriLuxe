name: Performance Monitoring

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 */6 * * *' # Every 6 hours
  workflow_dispatch:

defaults:
  run:
    working-directory: ./frontend

jobs:
  lighthouse:
    name: Lighthouse Performance Audit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Create environment file
        run: |
          cat > .env.local << EOF
          NEXT_PUBLIC_API_URL=https://api-staging.veriluxe.com
          NEXT_PUBLIC_STELLAR_NETWORK=testnet
          NEXT_PUBLIC_CONTRACT_ID=${{ secrets.STAGING_CONTRACT_ID }}
          EOF

      - name: Build application
        run: npm run build

      - name: Start application
        run: |
          npm run start &
          npx wait-on http://localhost:3000 --timeout 60000

      - name: Install Lighthouse CI
        run: npm install -g @lhci/cli@0.12.x

      - name: Run Lighthouse CI
        run: |
          lhci autorun --upload.target=temporary-public-storage
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}

      - name: Save Lighthouse results
        uses: actions/upload-artifact@v3
        with:
          name: lighthouse-results
          path: .lighthouseci/
          retention-days: 30

  web-vitals:
    name: Web Vitals Monitoring
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright
        run: npx playwright install --with-deps chromium

      - name: Create environment file
        run: |
          cat > .env.local << EOF
          NEXT_PUBLIC_API_URL=https://api-staging.veriluxe.com
          NEXT_PUBLIC_STELLAR_NETWORK=testnet
          NEXT_PUBLIC_CONTRACT_ID=${{ secrets.STAGING_CONTRACT_ID }}
          EOF

      - name: Build application
        run: npm run build

      - name: Start application
        run: |
          npm run start &
          npx wait-on http://localhost:3000 --timeout 60000

      - name: Run Web Vitals tests
        run: |
          npx playwright test --config=playwright-vitals.config.js
        continue-on-error: true

      - name: Upload Web Vitals results
        uses: actions/upload-artifact@v3
        with:
          name: web-vitals-results
          path: frontend/test-results/
          retention-days: 30

  bundle-size:
    name: Bundle Size Analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Analyze bundle size
        uses: transferwise/actions-next-bundle-analyzer@master
        with:
          workflow-id: bundle-size
          base-branch: main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Check bundle size limits
        run: |
          npx bundlesize
        env:
          CI: true

  performance-regression:
    name: Performance Regression Testing
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout code (PR)
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Build PR version
        run: npm run build

      - name: Run performance tests (PR)
        id: pr-perf
        run: |
          npm run start &
          npx wait-on http://localhost:3000 --timeout 60000
          npx lighthouse http://localhost:3000 --output=json --output-path=./lighthouse-pr.json
          kill %1

      - name: Checkout main branch
        uses: actions/checkout@v4
        with:
          ref: main

      - name: Build main version
        run: npm run build

      - name: Run performance tests (main)
        id: main-perf
        run: |
          npm run start &
          npx wait-on http://localhost:3000 --timeout 60000
          npx lighthouse http://localhost:3000 --output=json --output-path=./lighthouse-main.json
          kill %1

      - name: Compare performance
        run: |
          node .github/scripts/compare-lighthouse.js \
            ./lighthouse-main.json \
            ./lighthouse-pr.json

      - name: Comment PR with results
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const results = fs.readFileSync('./performance-comparison.md', 'utf8');
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: results
            });

  visual-regression:
    name: Visual Regression Testing
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright
        run: npx playwright install --with-deps

      - name: Create environment file
        run: |
          cat > .env.local << EOF
          NEXT_PUBLIC_API_URL=https://api-staging.veriluxe.com
          NEXT_PUBLIC_STELLAR_NETWORK=testnet
          NEXT_PUBLIC_CONTRACT_ID=${{ secrets.STAGING_CONTRACT_ID }}
          EOF

      - name: Build application
        run: npm run build

      - name: Start application
        run: |
          npm run start &
          npx wait-on http://localhost:3000 --timeout 60000

      - name: Run visual regression tests
        run: npx playwright test --config=playwright-visual.config.js

      - name: Upload visual test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: visual-regression-results
          path: |
            frontend/test-results/
            frontend/playwright-report/
          retention-days: 30

  performance-monitoring:
    name: Send Performance Metrics
    runs-on: ubuntu-latest
    needs: [lighthouse, web-vitals, bundle-size]
    if: always() && github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Download Lighthouse results
        uses: actions/download-artifact@v3
        with:
          name: lighthouse-results

      - name: Download Web Vitals results
        uses: actions/download-artifact@v3
        with:
          name: web-vitals-results

      - name: Send metrics to monitoring service
        run: |
          # Send metrics to your monitoring service (DataDog, New Relic, etc.)
          curl -X POST "${{ secrets.MONITORING_WEBHOOK_URL }}" \
            -H "Content-Type: application/json" \
            -d @lighthouse-results.json
        env:
          MONITORING_API_KEY: ${{ secrets.MONITORING_API_KEY }}